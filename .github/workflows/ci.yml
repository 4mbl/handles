name: CI

on:
  push:
    branches:
      - '**'

env:
  PYTHONUTF8: 1 # force utf-8 encoding to fix windows compat

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12', '3.13']

    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install package
        run: |
          python -m pip install --upgrade pip
          python -m pip install . --force-reinstall

      - name: Run tox
        run: |
          pip install -r requirements-dev.txt
          tox -p auto

      - name: Set version to 0.0.0
        run: |
          # use tomlkit till all supported python versions support tomllib
          if [[ "${{ matrix.python-version }}" == "3.10" ]] || [[ "${{ matrix.python-version }}" == "3.9" ]]; then
            pip install build tomlkit
            python -c "import tomlkit; f=open('pyproject.toml', 'r'); data=tomlkit.parse(f.read()); f.close(); data['project']['version']='0.0.0'; f=open('pyproject.toml', 'w'); f.write(tomlkit.dumps(data)); f.close()"
          else
            pip install build tomli-w
            python -c "import tomllib; import tomli_w; reader=open('pyproject.toml', 'rb'); data=tomllib.load(reader); data['project']['version']='0.0.0'; writer=open('pyproject.toml', 'wb'); tomli_w.dump(data, writer)"
          fi
        shell: bash

      - name: Build package
        run: |
          python -m build

      - name: Install package
        run: |
          pip install ./dist/handles-0.0.0-py3-none-any.whl --force-reinstall

      - name: Run package
        run: |
          handles --help
          handles --platforms '*' 'username'
